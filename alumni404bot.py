from random import choice
import sqlite3
import pip
from background import keep_alive
pip.main(['install', 'pytelegrambotapi'])
from cnfg import config
import telebot
from telebot import types
from starshaki import stud
from rassylka import text_dlya_rassylki
import json


con = sqlite3.connect('users.db', check_same_thread=False)
cursor = con.cursor()

print(1)
bot = telebot.TeleBot(config['token'])
print(2)
message_for_change = ""

with open("studi.json") as json_file:
    my_json = json.load(json_file)


@bot.message_handler(commands=["start"])
def start(message):
    print(message.chat.id, message.from_user.first_name)
    if my_json["id"].get(str(message.chat.id)) == None:
        my_json["id"].update({str(message.chat.id) : False})
        with open("studi.json", 'w') as json_file:
            json.dump(my_json, json_file, indent=4)
    print(my_json)
    key_board = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    get_info = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É")

    key_board.add(get_info)

    name = message.from_user.first_name

    bot.send_photo(message.chat.id, photo = "https://scontent.fala8-1.fna.fbcdn.net/v/t1.18169-9/19905208_1574170009269342_1621587858715569363_n.jpg?_nc_cat=103&ccb=1-7&_nc_sid=09cbfe&_nc_ohc=2ZfyWV8rkDMAX9KjE6Z&_nc_ht=scontent.fala8-1.fna&oh=00_AT_U6j7l6crXDQWgmfHBi2gz2Pytu_YB1AXyI3v1pg2hlQ&oe=63255A20", caption=f"–ü—Ä–∏–≤–µ—Ç {name}, –º—ã —Ä–∞–¥—ã —á—Ç–æ —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º", reply_markup=key_board)

@bot.message_handler()
def get_message(message):

    print(json.dumps(my_json, indent=4))
    global message_for_change
    if my_json['id'][str(message.chat.id)] == True:
        try:
            msg = int(message.text)
            query=f"""SELECT * from Rooms WHERE Room like {msg}"""
            query=f"""SELECT * from Rooms"""
        except:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞")
            return
        
        print(msg)
        cursor.execute(query)
        result = cursor.fetchall()
        print(result)
        return
        try:
            arr = [str(i) for i in cursor.execute(query).fetchone()]
            arr.pop()
            arr[0] = "–£–ª–∏—Ü–∞: " + arr[0]
            arr[1] = "–≠—Ç–∞–∂: " + arr[1]
            s = "–í–∞—à –∫–∞–±–∏–Ω–µ—Ç\n"
            s += "\n".join(arr)
        except:
            s = "–¢–∞–∫–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ—Çü•∫"
        bot.send_message(message.chat.id, s)
        send_info_1(message=message)

        my_json['id'][str(message.chat.id)] = False


    # if message.chat.id == 478214472 and message.text == "/–†–∞—Å—Å—ã–ª–∫–∞":
    if message.chat.id == 784892442 and message.text == "/–†–∞—Å—Å—ã–ª–∫–∞":
        text = text_dlya_rassylki
        with open('studi.json') as jsn_file:
            my_jsn = json.load(jsn_file)
            for i, j in my_jsn["id"].items():
                try:
                    bot.send_message(int(i), text_dlya_rassylki)
                except:
                    # bot.send_message(-636032836, "–ß–µ—Ç –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è")
                    bot.send_message(784892442, "–ß–µ—Ç –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è")

    if message.text == "–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ —è –°–∞–±–∏—Ä. –ü–æ–º–æ–≥–∏":
        print(type(message.chat.id))



    if message.text == '–¢—É–∞–ª–µ—Ç—ã':
        text = """–ß—Ç–æ–±—ã —Ç–∏—Ö–æ—Ä—è –ø–æ—Å—Ä–∞—Ç—å –∏–¥–∏ –≤ —Ç—É–∞–ª–µ—Ç –Ω–∞ –∫–∞–∑—ã–±–µ–∫ –±–∏ –≤–æ–∑–ª–µ –∫–æ–≤–æ—Ä–∫–∏

–ü–æ–∫–∞–∫–∞—Ç—å –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫—Ä–∞—Å–∞–≤–∏—Ü —ç—Ç–æ 4 —ç—Ç–∞–∂ –ø–∞–Ω—Ñ–∏–ª–æ–≤–∞ –∏ –∞–±—ã–ª–∞–π —Ö–∞–Ω–∞

–°–∞–º—ã–π –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç –Ω–∞ –ø–∞–Ω—Ñ–∏–ª–æ–≤–∞ 2

–°–∞–º—ã–π —Ö—Ä–µ–Ω–æ–≤—ã–π —Ç—É–∞–ª–µ—Ç –Ω–∞ —Ç–±1

–í —Ç—É–∞–ª–µ—Ç –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å—Ç–æ–∏—Ç –∑–∞—Ö–æ–¥–∏—Ç—å - –¶–≠ - –ø–µ—Ä–µ—Ö–æ–¥ —Å —Ç–± –Ω–∞ –∞–±—ã–ª–∞–π—Ö–∞–Ω–∞

–ù–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–∂–µ –µ—Å—Ç—å —Ç—É–∞–ª–µ—Ç—ã, –æ–Ω–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ:)\n\ninst\n@404alumni"""

        bot.send_message(message.chat.id, text)






#–æ—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ input
    if message.text == '–ü–æ–∏—Å–∫ –∫–∞–±–∏–Ω–µ—Ç–∞':
        my_json['id'][str(message.chat.id)] = True
        print(my_json)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞\n\ninst\n@404alumni')







    if message.text == '–ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã':
        text = """–î–µ–∫–∞–Ω–∞—Ç Abylai khan 2

–û–† Panfilov 2
–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è Tole bi 5

–ü—Ä–µ—Å—Å —Ü–µ–Ω—Ç—Ä Kazybek bi 2

Independence hall / –∫—Ä—É–≥–ª—ã–π –∑–∞–ª Tole bi 2

–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ Kazybek bi 1

–û—Ö—Ä–∞–Ω–∞ Kazybek bi, –∞–±, –∫–æ–Ω–µ—Ü –∫–±, –ø—Ä–æ—Ö–æ–¥–∏—à—å –¥–∞–ª—å—à–µ –∞—Ä–∫–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É –∫–± 0\n\ninst\n@404alumni"""

        bot.send_message(message.chat.id, text)









    if(message.text == "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É" or message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"):
        send_info_1(message = message)







    if message.text == '–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º':
        keyboard_material = types.InlineKeyboardMarkup()
        item_1 = types.InlineKeyboardButton("–í–∏–¥–µ–æ –õ–µ–∫—Ü–∏–∏", callback_data="video_lectures")
        item_2 = types.InlineKeyboardButton("–ü–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", callback_data="file_with_documents")

        keyboard_material.add(item_1, item_2)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ", reply_markup=keyboard_material)






    #
    # –í –ø—Ä–æ—Ü–µ—Å–µ–µ
    #

    if message.text == "–ò–Ω—Ñ–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–º":
        bot.send_message(message.chat.id, "–í –ø—Ä–æ—Ü–µ—Å—Å–µ\n\ninst\n@404alumni")


    ne_trogat = message.from_user.first_name
    ne_trogat += '\n'
    ne_trogat += message.text

    bot.send_message(-636032836, ne_trogat)

def send_info_1(message):
    markup_inline = types.InlineKeyboardMarkup()
    item_gaid = types.InlineKeyboardButton('–ì–∞–π–¥ –ø–µ—Ä–≤–∞—à–∞' , callback_data= 'guide')
    item_material = types.InlineKeyboardButton('–£—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª' , callback_data= 'material')
    item_rooms = types.InlineKeyboardButton('–ù–∞–π—Ç–∏ –∫–∞–±–∏–Ω–µ—Ç' , callback_data= 'rooms')
    item_was_first = types.InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å—Ç–∞—Ä—à–∞–∫—É' , callback_data= 'first')
    item_was_first2 = types.InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã' , callback_data= 'connn')
    item_kbtu = types.InlineKeyboardButton('–ú–µ–º—ã –∫–±—Ç—É' , callback_data= 'kbtu__keyboard__item')

    markup_inline.add(item_gaid)
    markup_inline.add(item_material)
    markup_inline.add(item_rooms)
    markup_inline.add(item_was_first)
    markup_inline.add(item_was_first2)
    markup_inline.add(item_kbtu)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:", reply_markup=markup_inline)

lisss1 = json.load(open("./cont.json" , 'r')) 
def make_btnss(lisss1):
        markup_inline = types.InlineKeyboardMarkup(row_width=3)
        i = 0
        k = 0
        mini_lis = []
        for key , value in lisss1.items():
            btn = types.InlineKeyboardButton(value[0] , callback_data=key)
            # markup_inline.add(btn)
            i+=1
            k+=1
            mini_lis.append(btn)
            if i == 3 or len(lisss1) == k-2:
                markup_inline.row(*mini_lis)
                i = 0
                mini_lis = []
        return markup_inline
ll = make_btnss(lisss1)  


@bot.callback_query_handler(func = lambda call: True)
def answer(call):
    bot.delete_message(call.message.chat.id, call.message.id)
    markup_reply_back = types.ReplyKeyboardMarkup(one_time_keyboard= True, resize_keyboard=True)
    item_back_main = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')

    markup_reply_back.add(item_back_main)
    if call.data == "guide":


        file = open("assets/guide_pervasha.pdf", 'rb')
        bot.send_document(call.message.chat.id, file, reply_markup=markup_reply_back, caption="\n\ninst\n@404alumni")


    



    if call.data == "material":
        markup_reply_2 = types.ReplyKeyboardMarkup(one_time_keyboard= True, resize_keyboard=True)
        item_material_lesson = types.KeyboardButton('–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º')
        # item_prepod = types.KeyboardButton('–ò–Ω—Ñ–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–º')
        item_back = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')

        markup_reply_2.add(item_material_lesson, item_back)
        bot.send_message(call.message.chat.id, '–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞\n\ninst\n@404alumni',
            reply_markup= markup_reply_2
        )





    if call.data == 'file_with_documents':
        link = '"https://drive.google.com/drive/folders/1XEEqk3LeWfsXTmp7UGB0CNwR081ONxQ5"'
        bot.send_message(call.message.chat.id, f"<a href={link}>–ü–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</a>\n\ninst\n@404alumni", parse_mode='html')
        send_info_1(call.message)





    if call.data == 'rooms':
        markup_reply_3 = types.ReplyKeyboardMarkup(one_time_keyboard= True, resize_keyboard=True)
        item_toiled = types.KeyboardButton('–¢—É–∞–ª–µ—Ç—ã')
        item_find_room = types.KeyboardButton('–ü–æ–∏—Å–∫ –∫–∞–±–∏–Ω–µ—Ç–∞')
        item_useful_rooms = types.KeyboardButton('–ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã')
        item_back = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')

        markup_reply_3.add(item_toiled,  item_find_room, item_useful_rooms, item_back)
        bot.send_message(call.message.chat.id, '–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–∞—Å—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç\n\ninst\n@404alumni',
            reply_markup=markup_reply_3
        )

    #
    # –í –ø—Ä–æ—Ü–µ—Å—Å–µ
    #

    if call.data == 'video_lectures':
        bot.send_message(call.message.chat.id, "–í –ø—Ä–æ—Ü–µ—Å—Å–µ")
        send_info_1(call.message)

    if call.data == "kbtu__keyboard__item":
        link1 = '<a href = "https://instagram.com/kbtu.hub?igshid=YmMyMTA2M2Y=">kbtu.hub</a>'
        link2 = '<a href = "https://instagram.com/office_of_the_registrar?igshid=YmMyMTA2M2Y=">–û–† | –û—Ñ–∏—Å –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</a>'
        link2 = '<a href = "https://instagram.com/office_of_the_registrar?igshid=YmMyMTA2M2Y=">–û–† | –û—Ñ–∏—Å –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</a>'
        bot.send_message(call.message.chat.id, f"<b>‚Ä¢</b> {link1}\n<b>‚Ä¢</b> {link2}\n\ninst\n@404alumni", parse_mode="html")
        # bot.send_message(call.message.chat.id, f"<b>‚Ä¢</b> {link1}\n<b>‚Ä¢</b> {link2}\n\ninst\n@404alumni")
        send_info_1(call.message)

    

    if call.data == "connn":
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:", reply_markup=ll)
    # {'FIT_c': "–¢–µ–∫—Å—Ç –ø–æ—á—Ç–∞ –±–ª–∞ –±–ª–∞ –±–∞–ª", 'BS_c':  "–¢–µ–∫—Å—Ç –ø–æ—á—Ç–∞ –±–ª–∞ –±–ª–∞ –±–∞–ª qwq w", 'MCM_c' :  "–¢–µ–∫—Å—Ç –ø–æ—á—Ç–∞ –±–ª–∞ –±–ª–∞ –±–∞–ª" , 'NGD_c': "–¢–µ–∫—Å—Ç –ø–æ—á—Ç–∞ –±–ª–∞ –±–ª–∞ –±–∞–ª" , 'GEO_c' :  "–¢–µ–∫—Å—Ç –ø–æ—á—Ç–∞ –±–ª–∞ –±–ª–∞ –±–∞–ª"}
    if call.data in lisss1:
        txt = lisss1[call.data][1]
        print(txt)
        bot.send_message(call.message.chat.id, txt)
    if call.data == "first":
        markup_inline = types.InlineKeyboardMarkup()
        item_1 = types.InlineKeyboardButton('FIT' , callback_data= 'FIT')
        item_2 = types.InlineKeyboardButton('BS' , callback_data= 'BS')
        item_3 = types.InlineKeyboardButton('MCM' , callback_data= 'MCM')
        item_4 = types.InlineKeyboardButton('NGD' , callback_data= 'NGD')
        item_5 = types.InlineKeyboardButton('GEO' , callback_data= 'GEO')
        # item_6 = types.InlineKeyboardButton('FIT' , callback_data= 'first')

        markup_inline.add(item_1 , item_2 , item_3, item_4, item_5)

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:", reply_markup=markup_inline)

        # stud1 = choice(stud)

        # bot.send_message(call.message.chat.id, f"–§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å—Ç–∞—Ä–∞—à–∞–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∞—Ä—à–µ–∫—É—Ä—Å–Ω–∏–∫–∞. –ï–º—É —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç))\n\n<a href = {stud1[1]}>{stud1[0]}</a>\n\ninst\n@404alumni", parse_mode="html")
        # send_info_1(call.message)
    lisss = ['FIT', 'BS', 'MCM', 'NGD', 'GEO']
    if call.data in lisss:
        print("Hi")
        stud1 = choice(stud[call.data])
        print(stud1[0])
        print(stud1[1])
        bot.send_message(call.message.chat.id, f"–§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å—Ç–∞—Ä–∞—à–∞–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∞—Ä—à–µ–∫—É—Ä—Å–Ω–∏–∫–∞. –ï–º—É —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç))\n\n <a href={stud1[1]}> {stud1[0]} </a>\n\ninst\n@404alumni",parse_mode="html")




def main():
    keep_alive()
    bot.infinity_polling()

if __name__ == "__main__":
    main()